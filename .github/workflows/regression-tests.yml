name: Regression Tests

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    services:
      # Start backend API service
      backend:
        image: node:18
        options: --health-cmd="curl -f http://localhost:5000/health || exit 1" --health-interval=30s --health-timeout=10s --health-retries=3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Cypress dependencies
        run: npm ci
      
      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:5000/health
        env:
          NODE_ENV: test
      
      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm start &
          sleep 20
          curl -f http://localhost:3000
        env:
          NODE_ENV: test
          REACT_APP_API_URL: http://localhost:5000
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be fully ready..."
          sleep 30
          
          # Verify backend is responsive
          curl -f http://localhost:5000/health || exit 1
          
          # Verify frontend is responsive
          curl -f http://localhost:3000 || exit 1
      
      - name: Run Cypress regression tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          start: |
            cd backend && npm start
            cd frontend && npm start
          wait-on: 'http://localhost:3000, http://localhost:5000/health'
          wait-on-timeout: 120
          browser: chrome
          # Run all regression tests using tags
          command: npm run cy:run:regression
          config: |
            {
              "baseUrl": "http://localhost:3000",
              "video": true,
              "screenshotOnRunFailure": true,
              "viewportWidth": 1280,
              "viewportHeight": 720,
              "defaultCommandTimeout": 10000,
              "requestTimeout": 10000,
              "responseTimeout": 10000
            }
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:5000
          CYPRESS_adminUsername: admin
          CYPRESS_adminPassword: password
          CYPRESS_regularUsername: user1
          CYPRESS_regularPassword: user123
          CYPRESS_grepTags: "@regression"
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-regression
          path: cypress/screenshots
          retention-days: 7
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-regression
          path: cypress/videos
          retention-days: 7
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Regression Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: Full Regression Tests" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: Scheduled (every 6 hours)" >> $GITHUB_STEP_SUMMARY
          echo "- **Browser**: Chrome (headless)" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Test" >> $GITHUB_STEP_SUMMARY
          
          if [ -f cypress/reports/junit.xml ]; then
            echo "- **Results**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Regression Tests Failed - ${new Date().toISOString()}`,
              body: `
              ðŸš¨ **Regression Test Failure**
              
              The scheduled regression tests have failed.
              
              **Details:**
              - **Run ID**: ${context.runId}
              - **Workflow**: ${context.workflow}
              - **Commit**: ${context.sha}
              - **Time**: ${new Date().toISOString()}
              
              **Artifacts:**
              - Screenshots and videos are available in the workflow run
              
              **Next Steps:**
              1. Review the test results
              2. Check for application issues
              3. Fix any broken functionality
              4. Re-run tests to verify fixes
              
              [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              `,
              labels: ['bug', 'regression', 'automated-test-failure']
            })
      
      - name: Cleanup
        if: always()
        run: |
          # Kill any remaining processes
          pkill -f "npm start" || true
          pkill -f "node server.js" || true 