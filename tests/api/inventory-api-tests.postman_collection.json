{
	"info": {
		"_postman_id": "inventory-api-tests",
		"name": "Inventory Management API Tests",
		"description": "Comprehensive API tests for the inventory management system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.variables.get('base_url')) {",
					"    pm.variables.set('base_url', 'http://localhost:5000');",
					"}",
					"",
					"// Generate test data",
					"pm.variables.set('timestamp', Date.now());",
					"pm.variables.set('random_id', Math.floor(Math.random() * 1000));"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_item_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Health check returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Health check response contains status', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('status', 'OK');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			}
		},
		{
			"name": "Auth - Login Valid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Login successful with valid credentials', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response contains token and user info', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('token');",
							"    pm.expect(responseJson).to.have.property('user');",
							"    pm.expect(responseJson.user).to.have.property('username', 'admin');",
							"    ",
							"    // Store token for subsequent requests",
							"    pm.variables.set('auth_token', responseJson.token);",
							"});",
							"",
							"pm.test('Token is valid format', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.token).to.be.a('string');",
							"    pm.expect(responseJson.token.length).to.be.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			}
		},
		{
			"name": "Auth - Login Invalid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Login fails with invalid credentials', function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test('Error message is returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('error');",
							"    pm.expect(responseJson.error).to.include('Invalid');",
							"});",
							"",
							"pm.test('No token is returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.not.have.property('token');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrongpassword\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			}
		},
		{
			"name": "Items - GET All Items (Positive)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get items returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response is an array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"pm.test('Items have required properties', function () {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.length > 0) {",
							"        const item = responseJson[0];",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('title');",
							"        pm.expect(item).to.have.property('description');",
							"        pm.expect(item).to.have.property('userId');",
							"    }",
							"});",
							"",
							"pm.test('Response time is acceptable', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items"
					]
				}
			}
		},
		{
			"name": "Items - GET All Items Without Auth (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get items without auth returns 401', function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test('Unauthorized error message', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('error');",
							"    pm.expect(responseJson.error).to.include('Access token required');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items"
					]
				}
			}
		},
		{
			"name": "Items - POST Create Item (Positive)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Create item returns 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Created item has correct properties', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('title', `Test Item ${pm.variables.get('timestamp')}`);",
							"    pm.expect(responseJson).to.have.property('description', 'Test item description');",
							"    pm.expect(responseJson).to.have.property('userId');",
							"    ",
							"    // Store item ID for subsequent tests",
							"    pm.variables.set('test_item_id', responseJson.id);",
							"});",
							"",
							"pm.test('No additional properties expected', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.not.have.property('message');",
							"    pm.expect(responseJson).to.not.have.property('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test Item {{timestamp}}\",\n    \"description\": \"Test item description\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items"
					]
				}
			}
		},
		{
			"name": "Items - POST Create Item Invalid Data (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Create item with missing title returns 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('Validation error message returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('error');",
							"    pm.expect(responseJson.error).to.include('Title is required');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"Item without title\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/items",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items"
					]
				}
			}
		},
		{
			"name": "Items - PUT Update Item (Positive)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Update item returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Updated item has correct properties', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('title', `Updated Test Item ${pm.variables.get('timestamp')}`);",
							"    pm.expect(responseJson).to.have.property('description', 'Updated test item description');",
							"});",
							"",
							"pm.test('No additional properties expected', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.not.have.property('message');",
							"    pm.expect(responseJson).to.not.have.property('error');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Test Item {{timestamp}}\",\n    \"description\": \"Updated test item description\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/items/{{test_item_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items",
						"{{test_item_id}}"
					]
				}
			}
		},
		{
			"name": "Items - PUT Update Non-existent Item (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Update non-existent item returns 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test('Error message returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('error');",
							"    pm.expect(responseJson.error).to.include('Item not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Non-existent Item\",\n    \"description\": \"This should fail\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/items/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items",
						"99999"
					]
				}
			}
		},
		{
			"name": "Items - DELETE Item (Positive)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Delete item returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Success message returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('message', 'Item deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/items/{{test_item_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items",
						"{{test_item_id}}"
					]
				}
			}
		},
		{
			"name": "Items - DELETE Non-existent Item (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Delete non-existent item returns 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test('Error message returned', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('error');",
							"    pm.expect(responseJson.error).to.include('Item not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/items/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"items",
						"99999"
					]
				}
			}
		}
	]
} 